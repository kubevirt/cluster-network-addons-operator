---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: kube-cni-linux-bridge-plugin
  namespace: {{ .Namespace }}
  labels:
    tier: node
    app: cni-linux-bridge-plugin
spec:
  selector:
    matchLabels:
      name: kube-cni-linux-bridge-plugin
  template:
    metadata:
      labels:
        name: kube-cni-linux-bridge-plugin
        tier: node
        app: cni-plugins
      annotations:
        description: LinuxBridge installs 'bridge' CNI on cluster nodes, so it can be later used to attach Pods/VMs to Linux bridges
    spec:
{{ if .EnableSCC }}
      serviceAccountName: linux-bridge
{{ end }}
      affinity: {{ toYaml .Placement.Affinity | nindent 8 }}
      nodeSelector: {{ toYaml .Placement.NodeSelector | nindent 8 }}
      tolerations: {{ toYaml .Placement.Tolerations | nindent 8 }}
      priorityClassName: system-cluster-critical
      containers:
        - name: cni-plugins
          image: {{ .LinuxBridgeImage }}
          imagePullPolicy: {{ .ImagePullPolicy }}
          command:
            - /bin/bash
            - -ce
            - |
              echo 'Installing bridge and tuning CNIs'
              cni_mount_dir=/opt/cni/bin
              sourcebinpath=/usr/src/github.com/containernetworking/plugins/bin
              cp --remove-destination ${sourcebinpath}/bridge ${cni_mount_dir}/cnv-bridge
              cp --remove-destination ${sourcebinpath}/tuning ${cni_mount_dir}/cnv-tuning

              echo 'Checking bridge and tuning CNIs deployment on node'
              printf -v bridgechecksum "%s" "$(<$sourcebinpath/bridge.checksum)"
              printf -v tuningchecksum "%s" "$(<$sourcebinpath/tuning.checksum)"
              printf "%s %s" "${bridgechecksum% *}" "${cni_mount_dir}/cnv-bridge" | sha256sum --check
              printf "%s %s" "${tuningchecksum% *}" "${cni_mount_dir}/cnv-tuning" | sha256sum --check

              # Some projects (e.g. openshift/console) use cnv- prefix to distinguish between
              # binaries shipped by OpenShift and those shipped by KubeVirt (D/S matters).
              # Following two lines make sure we will provide both names when needed.
              find ${cni_mount_dir}/bridge &>/dev/null || ln -s ${cni_mount_dir}/cnv-bridge ${cni_mount_dir}/bridge
              find ${cni_mount_dir}/tuning &>/dev/null || ln -s ${cni_mount_dir}/cnv-tuning ${cni_mount_dir}/tuning
              echo 'Entering sleep... (success)'
              sleep infinity
          resources:
            requests:
              cpu: "10m"
              memory: "15Mi"
          securityContext:
            privileged: true
          volumeMounts:
            - name: cnibin
              mountPath: /opt/cni/bin
      volumes:
        - name: cnibin
          hostPath:
            path: {{ .CNIBinDir }}
